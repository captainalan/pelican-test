<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Alan's Miscellaneous Stuff Blog - Interwebs</title><link href="https://captainalan.github.io/pelican-test/" rel="alternate"></link><link href="https://captainalan.github.io/pelican-test/feeds/interwebs.atom.xml" rel="self"></link><id>https://captainalan.github.io/pelican-test/</id><updated>2019-07-20T00:00:00-07:00</updated><entry><title>I choose HTML</title><link href="https://captainalan.github.io/pelican-test/i-choose-html.html" rel="alternate"></link><published>2019-07-20T00:00:00-07:00</published><updated>2019-07-20T00:00:00-07:00</updated><author><name>Alan Wong</name></author><id>tag:captainalan.github.io,2019-07-20:/pelican-test/i-choose-html.html</id><summary type="html">&lt;p&gt;Before, I built &lt;a href="https://captainalan.github.io/me"&gt;my website in
React&lt;/a&gt;. Now, it is being
&lt;a href="https://captainalan.github.io"&gt;rebuilt&lt;/a&gt; in plain HTML/CSS (with some
help from Bootstrap and jQuery to make things like mobile
responsiveness less tedious). After spending a considerable amount of
time with fancy frameworks, why take a step "backwards"?&lt;/p&gt;
&lt;h2&gt;I got blocked?!&lt;/h2&gt;
&lt;p&gt;I â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Before, I built &lt;a href="https://captainalan.github.io/me"&gt;my website in
React&lt;/a&gt;. Now, it is being
&lt;a href="https://captainalan.github.io"&gt;rebuilt&lt;/a&gt; in plain HTML/CSS (with some
help from Bootstrap and jQuery to make things like mobile
responsiveness less tedious). After spending a considerable amount of
time with fancy frameworks, why take a step "backwards"?&lt;/p&gt;
&lt;h2&gt;I got blocked?!&lt;/h2&gt;
&lt;p&gt;I was trying out some different Linux distributions, and decided to
give the fully-free distro &lt;a href="https://trisquel.info"&gt;Trisquel&lt;/a&gt; a spin.
To my dismay, I found that &lt;a href="http://captainalan.github.io/me"&gt;&lt;em&gt;my own
site&lt;/em&gt;&lt;/a&gt; was blocked blocked for some
JavaScript-y reasons. It turns out that all sites that make use of
React (or at least &lt;code&gt;create-react-app&lt;/code&gt;, the tool I used to bootstrap my
site) are &lt;em&gt;blocked&lt;/em&gt; when &lt;a href="https://www.gnu.org/software/librejs/"&gt;certain sorts of
JavaScript&lt;/a&gt; are blocked.&lt;/p&gt;
&lt;p&gt;It is my goal to produce informative, unobtrusive websites that are
easily indexed, linked, downloaded, etc. If I can accomplish this goal
without freedom/privacy threatening software, why not choose simpler
tools?&lt;/p&gt;
&lt;h2&gt;Next steps&lt;/h2&gt;
&lt;p&gt;I am becoming more interested in &lt;strong&gt;static site generators&lt;/strong&gt; (such as
&lt;a href="https://blog.getpelican.com"&gt;Pelican&lt;/a&gt;, which was used to make this
site) because the HTML/CSS they spit out is compatible in most places
and they also make things like RSS feeds easy to do. I'll be trying
out various static generators in addition to writing plain HTML/CSS
and maybe some JavaScript.&lt;/p&gt;</content><category term="Interwebs"></category></entry><entry><title>Why Static Sites?</title><link href="https://captainalan.github.io/pelican-test/why-static-sites.html" rel="alternate"></link><published>2019-05-15T10:13:00-07:00</published><updated>2019-05-15T10:13:00-07:00</updated><author><name>Alan Wong</name></author><id>tag:captainalan.github.io,2019-05-15:/pelican-test/why-static-sites.html</id><summary type="html">&lt;p&gt;Updated 8/12/2019&lt;/p&gt;
&lt;p&gt;After half a year or so of learning all about dynamic websites (using
fancy new technology like Node.js), I've found myself returning to
good old-fashioned static sites for my personal projects. Here I'll go
through some reasons why.&lt;/p&gt;
&lt;h2&gt;Two approaches&lt;/h2&gt;
&lt;p&gt;Consider two scenarios:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;You write â€¦&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;Updated 8/12/2019&lt;/p&gt;
&lt;p&gt;After half a year or so of learning all about dynamic websites (using
fancy new technology like Node.js), I've found myself returning to
good old-fashioned static sites for my personal projects. Here I'll go
through some reasons why.&lt;/p&gt;
&lt;h2&gt;Two approaches&lt;/h2&gt;
&lt;p&gt;Consider two scenarios:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;You write a program that produces content for that user when a
   user runs it&lt;/li&gt;
&lt;li&gt;You write a program that produces content; you then distribute that
   content to people that want it&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The first approach here is how a lot of &lt;em&gt;dynamic&lt;/em&gt; websites work. You
write &lt;strong&gt;server side code&lt;/strong&gt; in something like JavaScript (Node), PHP,
Python, etc. to produce webpages on the fly for users. To do this,
you may have to go through lots of trials and tribulations to get your
program ('website') up and running.&lt;/p&gt;
&lt;p&gt;The second approach is how &lt;em&gt;static sites&lt;/em&gt; work. The "programming"
involved (if any) is to generate content once. Compare this to
&lt;em&gt;compiling&lt;/em&gt; a high(er) level programming language into machine
code. Once you produce useful output, it is easy to distribute it
(there are many places, including GitHub pages, that can serve
&lt;strong&gt;static assets&lt;/strong&gt; for free).&lt;/p&gt;
&lt;p&gt;With dynamic websites, you might worry about hackers sending malicious
inputs into your website and blowing stuff up. With static websites,
this is not an issue. If you were really worried about one server
where your content is hosted, you could easily create &lt;strong&gt;mirror(s)&lt;/strong&gt; of
your content. Static sites deploy easily, without special
considerations about what will compile, what will be allowed,
etc. Everything is packaged up nicely and good to go.&lt;/p&gt;
&lt;h2&gt;Know your needs&lt;/h2&gt;
&lt;p&gt;For most people, static sites will do. Don't be pulled in by the buzz
words and hype of fancy platforms if all you need is some hosting for
HTML/CSS files and some images.&lt;/p&gt;
&lt;h3&gt;Priorities&lt;/h3&gt;
&lt;p&gt;Simplifying web development means having more time available to focus
on producing quality content, rather than wrestling with abstractions
and engineering-ish problems. &lt;/p&gt;
&lt;p&gt;Maybe you should write a math or engineering blog if you wanna do
either of those activities, respectively ðŸ˜¡&lt;/p&gt;</content><category term="Interwebs"></category></entry></feed>