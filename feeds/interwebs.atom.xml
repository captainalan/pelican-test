<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Alan's Miscellaneous Stuff Blog - Interwebs</title><link href="https://captainalan.github.io/pelican-test/" rel="alternate"></link><link href="https://captainalan.github.io/pelican-test/feeds/interwebs.atom.xml" rel="self"></link><id>https://captainalan.github.io/pelican-test/</id><updated>2020-05-18T00:00:00-07:00</updated><entry><title>Create React App: An Entry Point into "Modern" Web Development</title><link href="https://captainalan.github.io/pelican-test/create-react-app-an-entry-point-into-modern-web-development.html" rel="alternate"></link><published>2020-05-18T00:00:00-07:00</published><updated>2020-05-18T00:00:00-07:00</updated><author><name>Alan Wong</name></author><id>tag:captainalan.github.io,2020-05-18:/pelican-test/create-react-app-an-entry-point-into-modern-web-development.html</id><summary type="html">&lt;h2&gt;Introducing React&lt;/h2&gt;
&lt;p&gt;A popular way to build websites these days is to use
&lt;a href="https://reactjs.org/"&gt;React&lt;/a&gt;, which is officially described as "A
JavaScript library for building user interfaces".  With React, you
write JavaScript which does stuff in a "virtual DOM" rather than the
(browser's) DOM directly. In this way, you can work â€¦&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Introducing React&lt;/h2&gt;
&lt;p&gt;A popular way to build websites these days is to use
&lt;a href="https://reactjs.org/"&gt;React&lt;/a&gt;, which is officially described as "A
JavaScript library for building user interfaces".  With React, you
write JavaScript which does stuff in a "virtual DOM" rather than the
(browser's) DOM directly. In this way, you can work with some nice
abstractions that get "compiled" down to stuff a browser understands
natively.&lt;/p&gt;
&lt;p&gt;To use React, you only need one web page&amp;mdash;we'll call this
&lt;code&gt;index.html&lt;/code&gt;. You use JavaScript to "inject" everything into some
root. Using React, you will assume your users have JavaScript enabled
in their browser.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;noscript&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;u need javascript&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;noscript&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;root&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Using JavaScript to simulate different pages (by rendering different
"components"), you can provide users with a very fast-feeling
experience. This is because instead of requesting new pages from a
server when you click around your web app, you are just shuffling
around stuff in the aforementioned "Virtual DOM" using React's
(JavaScript) library. The result is near-zero "loading time" switching
between complex views which need not be organized in static "pages".&lt;/p&gt;
&lt;h2&gt;Using Create React App to skip the setup&lt;/h2&gt;
&lt;p&gt;Beginners with React typically start building apps using a tool called
&lt;a href="https://github.com/facebook/create-react-app"&gt;&lt;code&gt;create-react-app&lt;/code&gt;&lt;/a&gt;.
This tool gives a basic working app ("website") with a bunch of fancy
features ready to be used. For example,
&lt;a href="https://webpack.js.org/"&gt;webpack&lt;/a&gt;&amp;mdash;a "modular
bundler"&amp;mdash;already comes set up and ready to use. You can write
your JavaScript app in a bunch of files, use &lt;code&gt;imports&lt;/code&gt; and stuff and
rely on the default setup to package up everything together to be
deployed to the web. You can get a flying start trying out things like
JSX (HTML-looking JavaScript syntax used with React). Since
&lt;code&gt;create-react-app&lt;/code&gt; is a pretty popular tool, it is convenient to
search stuff like how to deploy an app created with this tool to
places like &lt;a href="https://pages.github.com/"&gt;GitHub pages&lt;/a&gt; or
&lt;a href="https://www.netlify.com/"&gt;Netlify&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Using &lt;code&gt;create-react-app&lt;/code&gt; is how I personally got started with my
programing career &lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;. I heard React was the hottest, latest and
greatest technology so I went and learned the basics using
&lt;code&gt;create-react-app&lt;/code&gt; so I could go find work.&lt;/p&gt;
&lt;p&gt;Assuming you have &lt;code&gt;npm&lt;/code&gt; installed, you can start using
&lt;code&gt;create-react-app&lt;/code&gt; by calling &lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2"&gt;2&lt;/a&gt;&lt;/sup&gt;,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;npx create-react-app name-of-my-new-app
&lt;span class="nb"&gt;cd&lt;/span&gt; name-of-my-new-app &lt;span class="c1"&gt;# Navigate into the directory of your new app&lt;/span&gt;
npm start &lt;span class="c1"&gt;# Start the development server&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The newly created app will contain a &lt;code&gt;README.md&lt;/code&gt; file that includes
instructions on how to do some basic stuff.&lt;/p&gt;
&lt;p&gt;Typically where people go from here is to open up their new app
directory in VS Code, which has big bucks (Microsoft) behind it as
well as armies of people making extensions and stuff.&lt;/p&gt;
&lt;h2&gt;What is nice&lt;/h2&gt;
&lt;p&gt;The set-up described above is not so difficult to do. You can start
using fancy features like cutting-edge new JavaScript syntax right
away.  You can create a production build with &lt;code&gt;npm run build&lt;/code&gt;. You can
expand what &lt;code&gt;create-react-app&lt;/code&gt; gives you by installing new packages.
The already-bundled script allow you to think less about setup and
config and focus your energies on doing things like making stuff
pretty with CSS and following the official docs on &lt;a href="https://reactjs.org/docs/thinking-in-react.html"&gt;"Thinking in
React"&lt;/a&gt;.
You are well-equipped to enter the "React cult".&lt;/p&gt;
&lt;h2&gt;Where trouble begins&lt;/h2&gt;
&lt;p&gt;Overally, as a tool for getting started and trying out some new
technology, &lt;code&gt;create-react-app&lt;/code&gt; is very nice. It can be dangerous to
use, however.&lt;/p&gt;
&lt;p&gt;The more complex of a job you are trying to do, you will find that you
will butt heads with &lt;code&gt;create-react-app&lt;/code&gt;. You are given many
pre-configured &lt;em&gt;layers of abstraction&lt;/em&gt;, set up for getting to work
quickly. When something goes wrong or when you need a new specific
functionality, it may be necessary to "look under the hood" and find
out "how the sausage is made".&lt;/p&gt;
&lt;p&gt;In this way, the "flying start" granted by &lt;code&gt;create-react-app&lt;/code&gt; may
cause more trouble for you than it helps because it encourages you to
use all sorts of things you are not familiar with.&lt;/p&gt;
&lt;p&gt;More experienced developers than me tell me that they more often than
not &lt;em&gt;do not&lt;/em&gt; use &lt;code&gt;create-react-app&lt;/code&gt; because if they are trying to do
something specific, it is easier to start from smaller building blocks
and build up a nice configuration. This is not too unlike the attitude
of many Linux "power users" that that prefer to start with something
like Debian or Arch Linux (relatively few default packages to start
with) rather than installing a more "user-friendly" distribution like
Ubuntu.&lt;/p&gt;
&lt;p&gt;For smaller, more isolated problems or reproducing examples of
specific issues, there are tools like
&lt;a href="https://codepen.io/"&gt;codepen.io&lt;/a&gt; which require no installation on
your part. Other setups, such as
&lt;a href="https://www.gatsbyjs.org/"&gt;GatsbyJS&lt;/a&gt;&amp;mdash;a static site
generator&amp;mdash;will use React with a different configuration than
&lt;code&gt;create-react-app&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;More general issues&lt;/h2&gt;
&lt;p&gt;Oftentimes, reaching for a popular "modern" solution like React is the
gut reaction for developers. Personally, I began learning React
because there were lots of job listings that mentioned it.&lt;/p&gt;
&lt;p&gt;The conveniences given by tools like &lt;code&gt;create-react-app&lt;/code&gt; encourage
(new) developers to jump into complicated technology "stacks" because
it is easy to introduce a huge lump of technology with minimal effort
at the beginning.&lt;/p&gt;
&lt;p&gt;There are many costs, however, to pay after enjoying this initial
convenience. A big one for beginning developers is having a big pile
of technology of which you understand little to nothing of many of its
parts.&lt;/p&gt;
&lt;p&gt;The pain of working through setting up a new project with a complex
tech stack is instructive in that it encourages you to think about why
it is(n't) worth it to introduce XYZ new and fancy
feature.&lt;/p&gt;
&lt;p&gt;It is for this reason that many more experienced developers than me
recommend focusing on fundamentals such as (vanilla) JavaScript, HTML,
and CSS on the front end plus some knowledge of how HTTP works, what
good structures in databases look like, and common practices for doing
things like authentication and handling file uploads in backend code.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;I was in graduate school in the social sciences; I decided to
start looking for work in web development. &lt;em&gt;Note:&lt;/em&gt; "programing" is
not a typo; this is the preferred spelling of Great Web Historian
&lt;a href="http://xahlee.info/"&gt;Xah Lee&lt;/a&gt;.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;Consult the &lt;a href="https://reactjs.org/docs/create-a-new-react-app.html#create-react-app"&gt;official
documentation&lt;/a&gt;
for the latest instructions.&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Interwebs"></category></entry><entry><title>Use Browser Navigation</title><link href="https://captainalan.github.io/pelican-test/use-browser-navigation.html" rel="alternate"></link><published>2020-02-26T00:00:00-08:00</published><updated>2020-02-26T00:00:00-08:00</updated><author><name>Alan Wong</name></author><id>tag:captainalan.github.io,2020-02-26:/pelican-test/use-browser-navigation.html</id><summary type="html">&lt;p&gt;Built into all browsers these days are buttons like FORWARD, BACK, and
REFRESH. However, many web developers choose to build navigation
components into their sites which ignore this built in functionality.
The result is UI &lt;strong&gt;bloat&lt;/strong&gt;. There are multiple back buttons displayed
for most users, both those on screen and â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Built into all browsers these days are buttons like FORWARD, BACK, and
REFRESH. However, many web developers choose to build navigation
components into their sites which ignore this built in functionality.
The result is UI &lt;strong&gt;bloat&lt;/strong&gt;. There are multiple back buttons displayed
for most users, both those on screen and those on the browser
itself. Rather than having content quickly and cleanly delivered, we
are faced with all-looking-the-same websites, which are supposedly
user-friendly.&lt;/p&gt;
&lt;p&gt;Individual users can do things to get rid of browser clutter. However,
most people aren't nerds who tweak their browser settings to hide
things they don't want (or who set up stuff like &lt;code&gt;vim&lt;/code&gt; keybindings for
their browser).&lt;/p&gt;
&lt;h2&gt;Content First&lt;/h2&gt;
&lt;p&gt;Making use of browser buttons instead of cluttering a UI with your own
buttons puts your &lt;em&gt;content first&lt;/em&gt;. Navigating your web pages should be
non-annoying, but is not the main reason people (should) visit your
website. Hopefully you have something useful to offer that pretty
menus and spinners.&lt;/p&gt;
&lt;h3&gt;Peripheral friendliness&lt;/h3&gt;
&lt;p&gt;One other advantage of making use of normal BACK/FORWARD functionality
is that many keyboards and mice (as well as other things, like game
controllers) can be set up to access these functions on convenient
thumb-buttons and other more ergonomic fixtures. Save your ass
expensive medical bills from &lt;b&gt;RSI&lt;/b&gt; and stuff and build for the
future.&lt;/p&gt;
&lt;h3&gt;Action plan&lt;/h3&gt;
&lt;p&gt;I'm going to write many web pages that you have to use your browser
navigation to get away from. No need to write another "back" button if
you can just press back. No layers of abstraction above normal browser
navigation.&lt;/p&gt;
&lt;h2&gt;Other technical notes&lt;/h2&gt;
&lt;p&gt;Modern web tech like &lt;strong&gt;React&lt;/strong&gt; piles on some layers of abstraction
through things like &lt;strong&gt;dynamic routing&lt;/strong&gt; with tools like &lt;strong&gt;React
router&lt;/strong&gt; to implement forward-back functionality in &lt;strong&gt;Single Page
Applications&lt;/strong&gt; (SPA). This is understandable for making snappy web
pages that feel "modern".&lt;/p&gt;
&lt;p&gt;However, if you don't load too many images and other media, keep
things clean and simple, etc., web pages don't even take that long to
load. This blog, for instance.&lt;/p&gt;</content><category term="Interwebs"></category></entry><entry><title>Facebook is Fine</title><link href="https://captainalan.github.io/pelican-test/facebook-is-fine.html" rel="alternate"></link><published>2020-02-10T00:00:00-08:00</published><updated>2020-02-10T00:00:00-08:00</updated><author><name>Alan Wong</name></author><id>tag:captainalan.github.io,2020-02-10:/pelican-test/facebook-is-fine.html</id><summary type="html">&lt;p&gt;A quick Internet search (c.f. &lt;em&gt;Google&lt;/em&gt; search) will reveal troves of
anti-Facebook articles. Should you get off Facebook?&lt;/p&gt;
&lt;p&gt;I have not quit Facebook. Here's some reasons why:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Using an online platform transparently linked to your real-world
   offers many advantages over anonymous platforms for &lt;strong&gt;connecting
   with real-life friends and family â€¦&lt;/strong&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;A quick Internet search (c.f. &lt;em&gt;Google&lt;/em&gt; search) will reveal troves of
anti-Facebook articles. Should you get off Facebook?&lt;/p&gt;
&lt;p&gt;I have not quit Facebook. Here's some reasons why:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Using an online platform transparently linked to your real-world
   offers many advantages over anonymous platforms for &lt;strong&gt;connecting
   with real-life friends and family, commerce, and finding new
   communities&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Facebook will harvest data on you (you "node" in its graph) whether
   you like it or not; might as well &lt;strong&gt;take as much control&lt;/strong&gt; of your
   user profile as you can&lt;/li&gt;
&lt;li&gt;You can &lt;strong&gt;train Facebook&lt;/strong&gt; to be more useful to you: e.g. use
   Facebook to study a foreign language&lt;/li&gt;
&lt;li&gt;Understanding Facebook is a &lt;strong&gt;marketable skill&lt;/strong&gt;: particularly,
   managing ad campaigns, administering pages, etc.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For those that can manage not being totally addicted to Facebook, I
think it is a decently good idea to reclaim Facebook as &lt;em&gt;your public
facing platform&lt;/em&gt;. Facebook is now a rather established platform that
offers many useful services. Approaching Facebook purposefully, you
can leverage it to be an overall good thing in your life.&lt;/p&gt;
&lt;h2&gt;Don't be a coward, show your face!&lt;/h2&gt;
&lt;p&gt;There are many places on the Internet where users communicate with
(relative) anonymity, hiding behind an anime profile picture, an image
of a cute dog/cat, some meme character, etc.  Certainly, there are
cases where anonymity is useful, notably for &lt;strong&gt;whistleblowers&lt;/strong&gt; or
other individuals who &lt;em&gt;must&lt;/em&gt; be anonymous for their own safety.  I
support the creation and maintenance of places for people to
communicate anonymously (and oppose "deplatforming" in the USA where I
live, generally), but I don't think they are good for most people most
of the time.&lt;/p&gt;
&lt;p&gt;Here are some general points about how anonymity can lead to bad
behavior:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Little to no "&lt;strong&gt;skin in the game&lt;/strong&gt;" causes people to speak
  recklessly or to take actions that can hurt others&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Escapism&lt;/strong&gt; is encouraged; &lt;strong&gt;accountability&lt;/strong&gt; is avoided&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Trends&lt;/strong&gt; are more difficult to assess; prolific shit-posters may
  inflate the relevance of certain themes, bringing the fringe to the
  mainstream; different information ecosystems&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;On the other hand, having a real-world identity linked up with online
interactions encourages people to treat each other more politely and
avoid being overtly nasty as the Internet functions as something of a
public record.&lt;/p&gt;
&lt;p&gt;Using a real-world identity online encoruages people to use online
platforms as &lt;em&gt;a gateway to offline interactions&lt;/em&gt;. Logistics can be
handled much more easily if everyone involved is familiar with social
media.&lt;/p&gt;
&lt;p&gt;The question of ads and influence (what I like to call "the dark
arts") is a big topic, especially following all the 2016 presidential
election stuff. That being said, a platform like Facebook allows
astute users to observe who is pushing what agenda more
transparently. Ads have to be pushed by someone for something, after
all. &lt;/p&gt;
&lt;h2&gt;Control your node&lt;/h2&gt;
&lt;p&gt;I have spoken to friends who at some point or another decided to
"close" their Facebook accounts. To the best of my knowledge, Facebook
makes no promises at ever completely deleting your stuff, so closing
your account is essentially forfeiting control of your node (data representing you on Facebook's &lt;a href="https://developers.facebook.com/docs/graph-api/overview"&gt;Graph API&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Choosing to keep a Facebook account (even if you don't use it much) is
akin to holding onto property you'd rather have &lt;em&gt;not abused&lt;/em&gt; event if
you aren't actively using it. Particularly for public-facing
individuals, keeping control of Facebook content about you might be a
good idea,&lt;/p&gt;
&lt;h2&gt;Train Facebook to do what you want&lt;/h2&gt;
&lt;p&gt;Facebook's &lt;strong&gt;Feed&lt;/strong&gt; has been the subject of lots of controversy.  Many
things about it are opaque to end users. However, in general, a "what
you put into the surveillance state browser is what you get out of it"
principle seems to hold true for most people I have discussed these
issues with.&lt;/p&gt;
&lt;p&gt;If you log into Google chrome and search for digital camera things on
Amazon, what sort of ads do you expect to see in Facebook?&lt;/p&gt;
&lt;p&gt;You can train Facebook to give you more of what you think you &lt;em&gt;should
be seeing&lt;/em&gt;. For example, if you are trying to do more home cooking,
just go search some cooking stuff. Facebook will probably feed you
lots of interesting inspiration.&lt;/p&gt;
&lt;h2&gt;Purposefully use Facebook&lt;/h2&gt;
&lt;p&gt;Nowadays, I only pick up phone calls if I am expecting a call or if
the number calling is one I recognize. This has saved lots of time.&lt;/p&gt;
&lt;p&gt;Approaching Facebook with a &lt;strong&gt;policy&lt;/strong&gt; like how many people approach
phone calls can allow you to leverage this powerful platform to
enhance your life. &lt;/p&gt;</content><category term="Interwebs"></category></entry><entry><title>I choose HTML</title><link href="https://captainalan.github.io/pelican-test/i-choose-html.html" rel="alternate"></link><published>2019-07-20T00:00:00-07:00</published><updated>2019-07-20T00:00:00-07:00</updated><author><name>Alan Wong</name></author><id>tag:captainalan.github.io,2019-07-20:/pelican-test/i-choose-html.html</id><summary type="html">&lt;p&gt;Before, I built &lt;a href="https://captainalan.github.io/me"&gt;my website in
React&lt;/a&gt;. Now, it is being
&lt;a href="https://captainalan.github.io"&gt;rebuilt&lt;/a&gt; in plain HTML/CSS (with some
help from Bootstrap and jQuery to make things like mobile
responsiveness less tedious). After spending a considerable amount of
time with fancy frameworks, why take a step "backwards"?&lt;/p&gt;
&lt;h2&gt;I got blocked?!&lt;/h2&gt;
&lt;p&gt;I â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Before, I built &lt;a href="https://captainalan.github.io/me"&gt;my website in
React&lt;/a&gt;. Now, it is being
&lt;a href="https://captainalan.github.io"&gt;rebuilt&lt;/a&gt; in plain HTML/CSS (with some
help from Bootstrap and jQuery to make things like mobile
responsiveness less tedious). After spending a considerable amount of
time with fancy frameworks, why take a step "backwards"?&lt;/p&gt;
&lt;h2&gt;I got blocked?!&lt;/h2&gt;
&lt;p&gt;I was trying out some different Linux distributions, and decided to
give the fully-free distro &lt;a href="https://trisquel.info"&gt;Trisquel&lt;/a&gt; a spin.
To my dismay, I found that &lt;a href="http://captainalan.github.io/me"&gt;&lt;em&gt;my own
site&lt;/em&gt;&lt;/a&gt; was blocked blocked for some
JavaScript-y reasons. It turns out that all sites that make use of
React (or at least &lt;code&gt;create-react-app&lt;/code&gt;, the tool I used to bootstrap my
site) are &lt;em&gt;blocked&lt;/em&gt; when &lt;a href="https://www.gnu.org/software/librejs/"&gt;certain sorts of
JavaScript&lt;/a&gt; are blocked.&lt;/p&gt;
&lt;p&gt;It is my goal to produce informative, unobtrusive websites that are
easily indexed, linked, downloaded, etc. If I can accomplish this goal
without freedom/privacy threatening software, why not choose simpler
tools?&lt;/p&gt;
&lt;h2&gt;Next steps&lt;/h2&gt;
&lt;p&gt;I am becoming more interested in &lt;strong&gt;static site generators&lt;/strong&gt; (such as
&lt;a href="https://blog.getpelican.com"&gt;Pelican&lt;/a&gt;, which was used to make this
site) because the HTML/CSS they spit out is compatible in most places
and they also make things like RSS feeds easy to do. I'll be trying
out various static generators in addition to writing plain HTML/CSS
and maybe some JavaScript.&lt;/p&gt;</content><category term="Interwebs"></category></entry><entry><title>Why Static Sites?</title><link href="https://captainalan.github.io/pelican-test/why-static-sites.html" rel="alternate"></link><published>2019-05-15T10:13:00-07:00</published><updated>2019-05-15T10:13:00-07:00</updated><author><name>Alan Wong</name></author><id>tag:captainalan.github.io,2019-05-15:/pelican-test/why-static-sites.html</id><summary type="html">&lt;p&gt;Updated 8/12/2019&lt;/p&gt;
&lt;p&gt;After half a year or so of learning all about dynamic websites (using
fancy new technology like Node.js), I've found myself returning to
good old-fashioned static sites for my personal projects. Here I'll go
through some reasons why.&lt;/p&gt;
&lt;h2&gt;Two approaches&lt;/h2&gt;
&lt;p&gt;Consider two scenarios:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;You write â€¦&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;Updated 8/12/2019&lt;/p&gt;
&lt;p&gt;After half a year or so of learning all about dynamic websites (using
fancy new technology like Node.js), I've found myself returning to
good old-fashioned static sites for my personal projects. Here I'll go
through some reasons why.&lt;/p&gt;
&lt;h2&gt;Two approaches&lt;/h2&gt;
&lt;p&gt;Consider two scenarios:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;You write a program that produces content for that user when a
   user runs it&lt;/li&gt;
&lt;li&gt;You write a program that produces content; you then distribute that
   content to people that want it&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The first approach here is how a lot of &lt;em&gt;dynamic&lt;/em&gt; websites work. You
write &lt;strong&gt;server side code&lt;/strong&gt; in something like JavaScript (Node), PHP,
Python, etc. to produce webpages on the fly for users. To do this,
you may have to go through lots of trials and tribulations to get your
program ('website') up and running.&lt;/p&gt;
&lt;p&gt;The second approach is how &lt;em&gt;static sites&lt;/em&gt; work. The "programming"
involved (if any) is to generate content once. Compare this to
&lt;em&gt;compiling&lt;/em&gt; a high(er) level programming language into machine
code. Once you produce useful output, it is easy to distribute it
(there are many places, including GitHub pages, that can serve
&lt;strong&gt;static assets&lt;/strong&gt; for free).&lt;/p&gt;
&lt;p&gt;With dynamic websites, you might worry about hackers sending malicious
inputs into your website and blowing stuff up. With static websites,
this is not an issue. If you were really worried about one server
where your content is hosted, you could easily create &lt;strong&gt;mirror(s)&lt;/strong&gt; of
your content. Static sites deploy easily, without special
considerations about what will compile, what will be allowed,
etc. Everything is packaged up nicely and good to go.&lt;/p&gt;
&lt;h2&gt;Know your needs&lt;/h2&gt;
&lt;p&gt;For most people, static sites will do. Don't be pulled in by the buzz
words and hype of fancy platforms if all you need is some hosting for
HTML/CSS files and some images.&lt;/p&gt;
&lt;h3&gt;Priorities&lt;/h3&gt;
&lt;p&gt;Simplifying web development means having more time available to focus
on producing quality content, rather than wrestling with abstractions
and engineering-ish problems. &lt;/p&gt;
&lt;p&gt;Maybe you should write a math or engineering blog if you wanna do
either of those activities, respectively ðŸ˜¡&lt;/p&gt;</content><category term="Interwebs"></category></entry></feed>